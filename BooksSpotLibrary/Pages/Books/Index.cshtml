@page
@using BooksSpotLibrary.Constants
@model BooksSpotLibrary.Pages.Books.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    @if ((await AuthorizationService.AuthorizeAsync(
                  User, Model.Book.FirstOrDefault(),
                   OperationNames.Create)).Succeeded)
    {
                                <a asp-page="Create" class="btn btn-primary" >Create New</a>
    }
</p>

<form>
    <p>
        @foreach (String status in UIConstants.Status)
        {
                <input type="checkbox" name="BookStatus" value="@status" checked="@Model.Statuses.Contains(status)"/>
                @status
        }
        <br>

        @foreach (String category in BookCategory.Categories)
        {
                <input type="checkbox" name="Category" value="@category" checked="@Model.Categories.Contains(category)"/>
                @category
        }
        <br>
    </p>

    <p>
        <select asp-for="Selection" asp-items="Model.Selections">
        <option value="All"> All</option>
        </select>
        Your Search Query: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Search/Filter" />
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Publisher)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].PublishingDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].ISBNCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Status)
            </th>
            @if (User.IsInRole(RoleNames.LibrarianRole))
            {
                <th>
                    @Html.DisplayNameFor(model => model.Book[0].Borrower)
                </th>
            }


            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Book) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Publisher)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PublishingDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ISBNCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
                @if (User.IsInRole(RoleNames.LibrarianRole))
                {
                        <td>
                        @Html.DisplayFor(modelItem => item.Borrower)
                        </td>
                }

                <td>
                    @if ((await AuthorizationService.AuthorizeAsync(
                    User, item,
                    OperationNames.Update)).Succeeded)
                    {
                       <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-primary">Edit</a>
                        <text> | </text>
                    }

                        <a asp-page="./Details" asp-route-id="@item.Id" class="btn btn-primary">Details</a>

                    @if ((await AuthorizationService.AuthorizeAsync(
                    User, item,
                   OperationNames.Delete)).Succeeded)
                    {
                        <text> | </text>
                        <a asp-page="./Delete" asp-route-id="@item.Id" class="btn btn-primary">Delete</a>
                    }
                 </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.Book.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Book.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-pageIndex="@(Model.Book.PageIndex - 1)"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-pageIndex="@(Model.Book.PageIndex + 1)"
   class="btn btn-primary @nextDisabled">
    Next
</a>
